<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on DevNote</title>
    <link>https://tak-bro.github.io/tags/swift/</link>
    <description>Recent content in Swift on DevNote</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 Mar 2015 12:22:59 -0600</lastBuildDate>
    
	<atom:link href="https://tak-bro.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Swift13 - Foundation Framework 02</title>
      <link>https://tak-bro.github.io/posts/basic-swift14/</link>
      <pubDate>Fri, 20 Mar 2015 12:22:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift14/</guid>
      <description>직렬화 바이너리 형태로 변환 바이너리 데이터 다루기 : NSData 직렬화된 데이터를 읽고, 파일로 쓰기 직렬화 담당 : 아카이버/언아카이버 직렬화 : NSKeyedArchiver 역직렬화 : NSKeyedUnarchiver 직렬화</description>
    </item>
    
    <item>
      <title>Swift13 - Foundation Framework 01</title>
      <link>https://tak-bro.github.io/posts/basic-swift13/</link>
      <pubDate>Fri, 20 Mar 2015 12:02:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift13/</guid>
      <description>프레임워크와 클래스 OS X, iOS용 어플리케이션의 기본 프레임워크 클래스 접두어 NS~ 데이터 다루기 네트워크 파일처리 Object C와 프레임워크 Swift 언어 발표 이전 개발 언어로</description>
    </item>
    
    <item>
      <title>Swift12 - 옵셔널 체인</title>
      <link>https://tak-bro.github.io/posts/basic-swift12/</link>
      <pubDate>Thu, 19 Mar 2015 22:02:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift12/</guid>
      <description>옵셔널 체인 옵셔널로 선언된 변수나 프로퍼티에 접근하려면 if let을 이용한 옵셔널 바인딩을 이용하거나 강제 어래핑을 한다. 옵셔널 채인은 nil로 인한 에러 없이</description>
    </item>
    
    <item>
      <title>Swift11 - Extension, 연산자, 비교</title>
      <link>https://tak-bro.github.io/posts/basic-swift11/</link>
      <pubDate>Thu, 19 Mar 2015 21:58:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift11/</guid>
      <description>확장 첨자 표기 타입 내 타입 연산자 정의 리터럴 호환 클래스(구조체, enum) 확장 프로퍼티, 메소드, 프로토콜, 서브스크립트, nested type ObjectiveC의 카테고리</description>
    </item>
    
    <item>
      <title>Swift10 - 클로저</title>
      <link>https://tak-bro.github.io/posts/basic-swift10/</link>
      <pubDate>Thu, 19 Mar 2015 21:55:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift10/</guid>
      <description>클로저 메소드이자 객체 Object C에서는 블록 클로저를 파라미터로 사용하는 것은 파라미터의 타입이 파라미터 -&amp;gt; 번환타입 형태 func sayHello() -&amp;gt; String { return &amp;quot;Hello&amp;quot; } var v1 = sayHello() var v2 = sayHello // v1 과</description>
    </item>
    
    <item>
      <title>Swift09 - 프로토콜</title>
      <link>https://tak-bro.github.io/posts/basic-swift09/</link>
      <pubDate>Thu, 19 Mar 2015 20:55:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift09/</guid>
      <description>프로토콜 메소드 호출 규격 protocol Singing { func sing() //선언만 } 메소드의 선언만 작성 인터페이스 구현이 없어서 단독 사용 불가 메소드 호출 약속 iOS 어플리케이션 개발에서 자주 사용</description>
    </item>
    
    <item>
      <title>Swift08 - 구조체</title>
      <link>https://tak-bro.github.io/posts/basic-swift08/</link>
      <pubDate>Thu, 19 Mar 2015 20:50:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift08/</guid>
      <description>구조체 클래스처럼 프로퍼티와 함수를 선언 클래스와 구조체 같은점 : 데이터, 행위 다른점 : 상속, 레퍼런스vs밸류, ARC(레퍼런스 타입만) 구조체 정의 ////// 1</description>
    </item>
    
    <item>
      <title>Swift07 - 상속</title>
      <link>https://tak-bro.github.io/posts/basic-swift07/</link>
      <pubDate>Thu, 19 Mar 2015 19:50:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift07/</guid>
      <description>상속 기존 클래스에서 새 클래스 작성 프로퍼티, 메소드 그대로 사용 class [자식 클래스] : [부모 클래스] {} 재정의하기 : override 메소드 // 자식 클래스에서 override func size() -&amp;gt; Int { return</description>
    </item>
    
    <item>
      <title>Swift06 - 메모리 관리(ARC)</title>
      <link>https://tak-bro.github.io/posts/basic-swift06/</link>
      <pubDate>Thu, 19 Mar 2015 18:50:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift06/</guid>
      <description>메모리 메모리 관리 객체 생성 -&amp;gt; 메모리 차지 메모리 공간의 제약 -&amp;gt; 메모리 관리 메모리 관리 필요한 객체 유지 필요없는 객체 해제 사용 중이라는 표시 - own(소유하기)</description>
    </item>
    
    <item>
      <title>Swift05 - 메소드</title>
      <link>https://tak-bro.github.io/posts/basic-swift05/</link>
      <pubDate>Thu, 19 Mar 2015 17:50:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift05/</guid>
      <description>메소드 인스턴스 메소드 객체를 생성하고 객체에 메소드를 호출하는 방식 객체에 반영된 값인 프로퍼티를 사용할 수 있다. 타입 메소드 객체를 생성하지 않고 동작하는 메소</description>
    </item>
    
    <item>
      <title>Swift04 - 클래스</title>
      <link>https://tak-bro.github.io/posts/basic-swift04/</link>
      <pubDate>Thu, 19 Mar 2015 17:35:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift04/</guid>
      <description>클래스 프로젝트에서 클래스는 하나의 swift 파일에 다수의 클래스 작성 클래스마다 swift 파일 작성 템플릿 Cocoa Class(클래스를 만듦, 부모클래스 정할 수 있음) Swift Fil</description>
    </item>
    
    <item>
      <title>Swift03 - 함수</title>
      <link>https://tak-bro.github.io/posts/basic-swift03/</link>
      <pubDate>Thu, 19 Mar 2015 14:35:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift03/</guid>
      <description>함수 -&amp;gt; 로 결과 타입 반환 // Bool 반환 func areYouOK() -&amp;gt; Bool { return true } // String func favorite() -&amp;gt; String{ return &amp;quot;Coffee&amp;quot; } 다수의 값 반환 : 튜플 사용 func random3() -&amp;gt; (Int, Int, Int){ let r1 = Int(arc4random() % 10) let r2 = Int(arc4random() % 10) let r3 = Int(arc4random() % 10) return (r1, r2, r3)</description>
    </item>
    
    <item>
      <title>Swift02 - 옵셔널</title>
      <link>https://tak-bro.github.io/posts/basic-swift02/</link>
      <pubDate>Thu, 19 Mar 2015 14:15:59 -0600</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift02/</guid>
      <description>옵셔널 정리 nil nil : 값이 할당되지 않은 상태 nil에 함수나 프로퍼티 사용 -&amp;gt; 런타임 에러 변수와 상수를 사용하기 전에 값이 설정돼야한다. var i : Int // Error println(i) 일반 변수(</description>
    </item>
    
    <item>
      <title>Swift01 - 기본 문법과 타입</title>
      <link>https://tak-bro.github.io/posts/basic-swift01/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://tak-bro.github.io/posts/basic-swift01/</guid>
      <description>기본문법 별도의 main함수를 작성하지 않는다. main 소스 코드의 글로벌 영역의 코드에서 시작한다. main이 아닌 다른 소스 파일에는 함수나 타입을 선언하는 코드</description>
    </item>
    
  </channel>
</rss>